import { styleSheet } from './index.js'


/**** serverside stuff ****/

// the api's copied from aphrodite, with 1 key difference 
// we include *all* the css generated by the app 
// to optimize to only include generated styles on the pages 
// use renderStaticOptimized
export function renderStatic(fn) {
  let html = fn()
  if(html === undefined) {
    throw new Error('did you forget to return from renderToString?')
  }
  
  let rules = styleSheet.rules(), css = rules.map(r => r.cssText).join('')
  return { html, ids: Object.keys(styleSheet.inserted), css, rules }
}

export function renderStaticOptimized(fn) {
  // parse out ids from html
  // reconstruct css/rules/cache to pass
  let html = fn()
  if(html === undefined) {
    throw new Error('did you forget to return from renderToString?')
  }
  let o = { html, ids: [], css: '', rules: [] }
  let regex = /css\-([a-zA-Z0-9]+)/gm
  let match, ids = {} 
  while((match = regex.exec(html)) !== null) {
    if(!ids[match[1] + '']) {        
      ids[match[1] + ''] = true
    }
  }

  o.rules = styleSheet.rules().filter(x => {
    let regex = /css\-([a-zA-Z0-9]+)/gm
    let match = regex.exec(x.cssText)
    if(match && ids[match[1] + '']) {
      return true
    }
    if(!match) {
      return true
    }
    return false
  })
  o.ids = Object.keys(styleSheet.inserted).filter(id => !!ids[id + ''] || styleSheet.registered[id].type === 'raw')
  o.css = o.rules.map(x => x.cssText).join('')
  
  return o
}

